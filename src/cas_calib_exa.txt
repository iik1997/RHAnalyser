

// THE FOLLOWING SHOULD GO SOMEWHERE INTO "GLOBAL DECLARATIONS"
// (mind the two "switches" just below: OLD_428_DATA is to be used for the old 
//  data, e.g. 2011 pp @ 2.76 GeV, so it is not relevant for 2013 data;
//  THIS_IS_MC is to be used for Monte Carlo samples, it prevents applying
//  any gain corrections/calibrations which are relevant for the data only and this
//  is true for any MC including one for 2013)

/***************************/
/**********!!!**************/
// #define OLD_428_DATA 
// #define THIS_IS_MC
/**********!!!**************/
/**************************/

namespace ForwardRecord {  
  const unsigned int CSectors = 16;
  const unsigned int CModules = 14;
#ifdef OLD_428_DATA
  const double absCasEscaleFactor = 0.015; 
#else
  const double absCasEscaleFactor = 0.020;
#endif

} //end namespace ForwardRecord

namespace castor {

//using for Katerina's value's (some correction values seem too big (for me big is all >3), some are zeros)
  const bool channelQuality[ForwardRecord::CSectors][ForwardRecord::CModules] =             // sector
    //mod 1   2     3     4     5      6    7     8     9    10     11    12   13    14
    {{true ,true ,true ,false,true ,true ,false,true ,true ,true ,true ,true ,true ,true }, // 1
     {true ,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,true ,true }, // 2
     {true ,true ,true ,true ,true ,true ,false,false,false,true ,false,true ,true ,true }, // 3 //s3m9 ? 
     {true ,true ,true ,true ,true ,true ,false,false,false,true ,false,true ,false,true }, // 4
     {true ,false,true ,true ,true ,true ,false,false,false,true ,true ,true ,true ,true }, // 5
     {true ,true ,true ,true ,true ,true ,false,false,false,true ,true ,true ,true ,true }, // 6 //s6m9 ?
     {true ,true ,true ,true ,true ,true ,false,true ,true ,false,false,false,false,false}, // 7 //s7m10-14katerina?
     {true ,true ,true ,true ,true ,true ,false,false,true ,false,false,false,false,false}, // 8 //s8m10-14katerina?
     {true ,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,false,true }, // 9 //s9m13?
     {true ,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,true ,true }, // 10
     {true ,true ,true ,true ,true ,true ,false,false,true ,true ,false,true ,true ,true }, // 11 //s11m11katerina?(was also there before)
     {true ,true ,true ,true ,true ,true ,false,false,true ,true ,false,true ,true ,true }, // 12 //s12m11katerina?(was also there before)
     {true ,true ,true ,true ,true ,false,false,false,false,true ,false,true ,false,true }, // 13 //s13m11katerina?(was also there before) //m9s13-SNP//m13s13-SNP
     {true ,true ,true ,true ,true ,true ,false,false,true ,true ,false,true ,true ,true }, // 14 //s14m11katerina?(was also there before)
     {true ,true ,true ,true ,true ,true ,false,false,true ,false,true ,true ,true ,true }, // 15
     {true ,true ,true ,true ,true ,false,false,false,true ,true ,true ,true ,true ,true }};// 16 //m8s16-strange-noise-peak(SNP),closer look needed

#ifdef OLD_428_DATA
  const double channelIntercalibCorr[ForwardRecord::CSectors][ForwardRecord::CModules] =
    {{     1.3701 ,    1.4709 ,    0.6117 ,    0.8972 ,    0.4640 ,    0.1848 ,    9.7444 ,    0.3365 ,    0.2572 ,    0.4714 ,    0.3240 ,    0.1967 ,    0.3084 ,    0.1645  },
     {     1.2265 ,    1.4897 ,    0.7495 ,    0.7318 ,    0.3955 ,    0.3050 ,    5.5303 ,    2.0929 ,    0.2538 ,    0.4026 ,    0.4191 ,    0.2082 ,    0.3169 ,    0.1957  },
     {     1.0166 ,    1.2438 ,    0.8025 ,    1.9026 ,    0.2362 ,    0.3031 ,   17.5698 ,    0.0000 ,    0.8806 ,    0.3689 ,    0.5344 ,    0.4912 ,    0.3583 ,    0.3073  },
     {     0.9056 ,    0.9166 ,    0.8326 ,    1.1412 ,    0.3070 ,    0.4375 ,   16.5410 ,    0.0000 ,    0.0000 ,    0.6522 ,    0.4035 ,    0.2690 ,    0.1471 ,    0.2754  },
     {     0.9935 ,    1.2291 ,    0.9083 ,    1.0373 ,    0.3749 ,    0.5002 ,    4.2422 ,    0.0000 ,    0.0000 ,    4.1239 ,    0.3159 ,    0.7048 ,    0.5351 ,    0.4954  },
     {     0.7776 ,    1.0104 ,    0.7956 ,    1.4532 ,    0.2361 ,    0.4289 ,   44.9370 ,    0.0000 ,    0.7804 ,    0.5092 ,    0.2327 ,    0.8089 ,    0.6899 ,    0.5420  },
     {     0.8596 ,    1.1765 ,    1.1511 ,    0.8430 ,    0.6682 ,    1.8405 ,    0.0000 ,    0.4535 ,    0.6307 ,    0.5989 ,    0.6247 ,    0.0000 ,    0.7020 ,    0.4745  },
     {     1.2867 ,    1.2193 ,    1.3185 ,    1.2524 ,    0.5472 ,    0.2482 ,   32.2495 ,    0.3334 ,    0.5916 ,    0.7465 ,    0.6092 ,    0.3063 ,    0.7467 ,    0.2268  },
     {     1.0147 ,    1.2313 ,    0.9716 ,    1.0000 ,    0.2104 ,    1.1529 ,   20.1270 ,    0.2144 ,    0.4552 ,    0.3849 ,    0.2506 ,    0.3448 ,    0.3437 ,    0.4677  },
     {     0.8099 ,    1.1048 ,    1.5190 ,    1.3555 ,    0.2286 ,    1.2479 ,   69.4715 ,    0.2426 ,    0.4942 ,    0.7211 ,    0.2442 ,    0.4468 ,    0.4218 ,    0.3345  },
     {     1.6824 ,    2.3471 ,    1.5481 ,    0.9906 ,    0.2119 ,    1.0717 ,   17.8984 ,   44.3873 ,    0.5349 ,    0.5173 ,   12.8141 ,    0.5538 ,    0.7995 ,    0.4327  },
     {     1.7215 ,    1.2024 ,    1.1115 ,    1.2943 ,    0.4238 ,    1.4140 ,    0.0000 ,    0.0000 ,    0.9465 ,    0.5723 ,   13.4895 ,    0.4727 ,    0.2425 ,    0.3038  },
     {     0.4439 ,    1.3415 ,    0.9335 ,    0.6067 ,    0.1940 ,    2.4494 ,    0.0000 ,    0.0000 ,    0.0000 ,    0.4774 ,   22.2232 ,    0.4806 ,    0.0000 ,    0.3125  },
     {     0.5853 ,    1.4652 ,    0.9517 ,    1.1912 ,    0.2749 ,    0.5013 ,    0.0000 ,    0.0000 ,    0.5274 ,    0.2801 ,   10.3582 ,    0.3733 ,    0.4314 ,    0.3029  },
     {     1.1327 ,    1.4487 ,    0.9568 ,    0.7324 ,    0.3609 ,    0.2590 ,    0.0000 ,    0.0000 ,    0.2626 ,    0.2741 ,    0.2826 ,    0.3635 ,    0.3436 ,    0.3950  },
     {     1.6316 ,    1.0836 ,    1.1930 ,    0.7702 ,    0.2002 ,    2.0732 ,   51.0338 ,    0.0000 ,    0.2069 ,    0.4475 ,    0.2795 ,    0.2044 ,    0.3467 ,    0.2486  }};

  const double channelEMCorr[ForwardRecord::CSectors][ForwardRecord::CModules] =
    {{     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  },
     {     0.5000 ,    0.5000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000 ,    1.0000  }};
#else
// Katerina's values using halo muon data (w/o TOTEM), already scaled by s9m4
  const double channelGainQE[ForwardRecord::CSectors][ForwardRecord::CModules] =                                                                                // sector
    //mod 1          2          3          4           5          6          7         8          9          10         11          12        13           14
    {{  0.7510,    0.8700,    2.7370,    0.0000,    0.3630,    0.6430,    0.0000,    0.3100,    0.2120,    0.2740,    0.3030,    0.1690,    0.2650,    0.1550}, //1
     {  0.6190,    0.6160,    1.8130,    0.8690,    0.1820,    0.6280,    0.0000,    0.5070,    0.1680,    0.2910,    0.3380,    0.1460,    0.2490,    0.1250}, //2
     {  1.0700,    0.6510,    1.4250,    0.7660,    0.3040,    0.1930,    8.2170,   13.2900,    0.4650,    0.2350,    0.0000,    0.2950,    0.3430,    0.3510}, //3
     {  0.5310,    0.3300,    0.8910,    0.8260,    0.1170,    0.3300,    0.0000,    0.0000,    0.0000,    0.6390,    0.0000,    0.3170,    0.0000,    0.4580}, //4
     {  0.6120,    0.0000,    1.3410,    0.7020,    0.1560,    0.5690,    0.8360,    0.0000,    0.0000,    0.5230,    0.2360,    0.3290,    0.3990,    0.3420}, //5
     {  1.3130,    0.4870,    1.4000,    0.6320,    0.1990,    0.7950,    1.2090,    0.0000,    0.5100,    0.7060,    0.2330,    0.2800,    0.4830,    0.4410}, //6
     {  0.4160,    0.2820,    1.0430,    0.3130,    0.1140,    0.0860,  250.6690,    0.1950,    0.4200,    6.9160,    3.4790,    1.5110,    4.8590,    3.5340}, //7
     {  0.3420,    0.2950,    1.1980,    1.4030,    0.2130,    1.0730,    0.0000,    0.2060,    0.6350,   27.2690,    9.4210,    3.3400,    3.4880,    1.0100}, //8
     {  0.3030,    0.8460,    1.4120,    1.0000,    0.2180,    0.8830,    0.0000,    0.1320,    0.1950,    0.2490,    0.2250,    0.2270,    0.2990,    0.2780}, //9
     {  0.9040,    1.4030,    2.6580,    1.1900,    0.2350,    1.5570,    0.0000,    0.3160,    0.1990,    0.3100,    0.1790,    0.2510,    0.2510,    0.2520}, //10
     {  1.0160,    0.9930,    1.6950,    0.8870,    0.2850,    0.6230,    0.0000,   10.0790,    0.3730,    0.2440,    9.6350,    0.5240,    0.6990,    0.3790}, //11
     {  1.1690,    1.1300,    2.1400,    1.3920,    0.2630,    1.2470,    0.0000,    0.0000,    0.5670,    0.3030,   99.3510,    0.3510,    0.1980,    0.3560}, //12
     {  0.9160,    1.2700,    1.6430,    0.8070,    0.2310,    2.3020,    0.0000,    0.0000,    0.3230,    0.2910,    0.0000,    0.3430,    0.1280,    0.3080}, //13
     {  0.6010,    0.9840,    2.1400,    0.8210,    0.1770,    1.0970,    0.0000,    0.0000,    0.2030,    0.2920,   16.6350,    0.3020,    0.3510,    0.3680}, //14
     {  0.7590,    1.3650,    2.9620,    1.1740,    0.3800,    2.3370,    0.0000,  517.2540,    0.2690,    0.0000,    0.1940,    0.2740,    0.2800,    0.4100}, //15
     {  0.7420,    0.9720,    2.4600,    0.9240,    0.2200,    0.1630,    3.9070,    0.1970,    0.2700,    0.2580,    0.1510,    0.1340,    0.2790,    0.2620}};//16
#endif

}


// THE FOLLOWING SHOULD GO SOMEWHERE INTO YOUR ANALYSER

  bool isData = true;
#ifdef THIS_IS_MC
  isData = false;
#endif


  // *************************** CASTOR RecHits ********************************
 

  edm::Handle<CastorRecHitCollection> casrechits;
  try{ iEvent.getByLabel("castorreco",casrechits); }
  catch(...) { edm::LogWarning(" CASTOR ") << " Cannot get Castor RecHits " << std::endl; }

  int nhits = 0;
  double energyCastor = 0;

  if(casrechits.failedToGet()!=0 || !casrechits.isValid()) {
    edm::LogWarning(" CASTOR ") << " Cannot read CastorRecHitCollection" << std::endl;
  } else {
    if (_ShowDebug) edm::LogVerbatim(" CastorRecHits ") << " CastorRecHitCollection size: " << casrechits->size() << std::endl;
    for(size_t i1 = 0; i1 < casrechits->size(); ++i1) {
      const CastorRecHit & rh = (*casrechits)[i1];
      HcalCastorDetId castorid = rh.id();
      int sec = castorid.sector();
      int mod = castorid.module();
      int ich = 14*(sec-1)+(mod-1);
      double corrFactor = 1.0;
      if(ich >= 0 && ich <= 223 && castor::channelQuality[sec-1][mod-1]) {
        if(isData) {
#ifdef OLD_428_DATA
          corrFactor = castor::channelIntercalibCorr[sec-1][mod-1] * castor::channelEMCorr[sec-1][mod-1] * ForwardRecord::absCasEscaleFactor;
#else
          corrFactor = castor::channelGainQE[sec-1][mod-1] * ForwardRecord::absCasEscaleFactor;
#endif
        }
        energyCastor += corrFactor * rh.energy();
      }
      nhits++;
    } // end loop castor rechits
    if (_ShowDebug && casrechits->size() > 0) edm::LogVerbatim(" CastorRecHits ") << " Castor energy: " << energyCastor << std::endl;
  }

